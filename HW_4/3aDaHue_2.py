# Задайте натуральное число n.
# Напишите программу, которая составит список простых множителей числа n

# Асимпто́тика (гр.; см. асимптота) мат. поведение функции 
# в особых точках, чаще всего при стремлении аргумента или функции к бесконечности.

n = int(input('Введите какое-то натуральное число больше 3: '))
# Решето Эратосфена для нахождения простых чисел
# Решето Эратосфена — это алгоритм, позволяющий найти все
# простые числа в отрезке [1; n] за O (ln ln n) операций.
def primes(n):
    sieve = [True] * n
    for i in range(3, int(n**0.5)+1, 2):
        if sieve[i]:
            sieve[i*i::2*i]=[False]*((n-i*i-1)//(2*i)+1)
    return [2] + [i for i in range(3,n,2) if sieve[i]]
print(primes(n))

factors = []
d = 2
m = n               # Запомним исходное число
# while d * d <= n: # Можно через while, но при помощи решета, думаю меньше шагов
for d in primes(n + primes(n)[d]):
    if not(n % d):
        factors.append(d)
        n//=d
    else:
        d += 1
# factors.append(n)   # Добавим последнее простое число при цикле while
if len(factors) == 1:
    print('Это и есть простое число')
else:
    print('{} равно произведению чисел {}'.format(m, factors))  # Выводим исходное число
                                                            # и все простые множители.